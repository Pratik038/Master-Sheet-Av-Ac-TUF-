// append k in linked list
// make last k nodes in the starting
#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

void insertAtTail(node *&head, int data)
{
    node *n = new node(data);
    if (head == NULL)
    {
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = n;
}

void display(node *head)
{
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}

node *kAppend(node *head, int k)
{
    node *tail = head;
    node *newTail;
    node *newHead;
    node *temp = head;
    int len = 0;
    int count = 1;
    while (temp)
    {
        len++;
        temp = temp->next;
    }
    while (tail->next)
    {
        if (count == len - k)
        {
            newTail = tail;
        }
        if (count == (len - k + 1))
        {
            newHead = tail;
        }
        tail = tail->next;
        count++;
    }
    newTail->next = NULL;
    tail->next = head;
    return newHead;
}

int main()
{
    node *head = NULL;
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    insertAtTail(head, 3);
    insertAtTail(head, 4);
    insertAtTail(head, 5);
    insertAtTail(head, 6);
    // insertAtTail(head,7);
    node *temp;
    temp = kAppend(head, 3);
    display(temp);
    return 0;
}
