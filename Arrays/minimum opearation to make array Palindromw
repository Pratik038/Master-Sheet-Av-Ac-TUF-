// Minimum number of operation required to make array palindromic

//------ Recursive solution
// int findNoOfOperation(vector<int> a, int i,int j){
// 	//base case
// 	if(i==j)
// 		return 0;

// 	if(i<=j){
// 		//process according to three conditions 
// 		//deiscussed previously
// 		if(a[i]==a[j])
// 			return findNoOfOperation(a,i+1,j-1);

// 		else if(a[i]>a[j]){
// 			a[j-1]=a[j]+a[j-1];
// 			return findNoOfOperation(a,i,j-1)+1;
// 		}   
// 		else{
// 			a[i+1]=a[i]+a[i+1];
// 			return findNoOfOperation(a,i+1,j)+1;
// 		}
// 	}
// 	return 0;
// }

//------- Iterative approach
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    int count=0;
    int i=0,j=n-1;
    while(i<=j)
    {
        if(arr[i]==arr[j])
        {
            i++;
            j--;
        }
        else if(arr[i]<=arr[j])
        {
            arr[i+1]=arr[i]+arr[i+1];
            i++;   
            count++;
        }
        else
        {
            arr[j-1]=arr[j]+arr[j-1];
            j--;
            count++;
        }
        
    }
    cout<<count<<"\n";
    return 0;
}
