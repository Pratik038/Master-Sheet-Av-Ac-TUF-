// Search in a sorted and rotated array
// Approaches:
// 1>. Linear search
// 2>. Find min element and apply binary search (0 to mid-1) and (mid to n-1) 2 traversal O(2logn)
// 3>. using single traversal binary search O(logn)

#include<bits/stdc++.h>
using namespace std;

int searchEle(int arr[],int n,int sk )
{
    int l=0;
    int h=n-1;
    while(l<=h)
    {
        int mid=l+(h-l)/2;
        if(arr[mid]==sk)
        {
            return mid;
        }
        else if(arr[mid]>=arr[l] )
        {
            if(sk>=arr[l] && sk<=arr[mid])
                h=mid-1;
            else l=mid+1;    
        }
        else
        {
            if(sk>=arr[mid] && sk<=arr[h])
                l=mid+1;
            else h=mid-1;    
        }
        
    }
    return -1;
}
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    int sk;
    cin>>sk;    
    cout<<searchEle(arr,n,sk);    
    return 0;
} 
