//find if array is a subset of another array
// Approaches: m-> A and n->B (distinct element)
// 1>. for each element in B do linear search in A --> O(nm)
// 2>. for each element in B do Binary search in A --> O(nlogm + mlogm)
// 3>. Hashing O(n+m)

// duplicate element
// 4>. Use two pointer after sorting both arrays O(mlogm + nlogn + O(n+m))

// 3> Method

// #include <iostream>
// #include<bits/stdc++.h>
// using namespace std;


// int main() {
// 	//code
// 	int test;
// 	cin>>test;
// 	while(test--)
// 	{
// 	    int size1,size2,flag=1;
// 	    cin>>size1>>size2;
// 	    int arr1[size1],arr2[size2];
// 	    for(int i=0;i<size1;i++)
// 	        cin>>arr1[i];
// 	    for(int i=0;i<size2;i++)
// 	       cin>>arr2[i];     
// 	    unordered_set<int> s;
// 	    for(int i=0;i<size1;i++)
// 	     s.insert(arr1[i]);
// 	    for(int i=0;i<size2;i++) 
// 	    {
// 	        if(s.find(arr2[i])==s.end())
// 	          {flag=0;
// 	          cout<<"No"<<endl;
// 	          break;}
	        
// 	    }
// 	    if(flag==1)
// 	    cout<<"Yes"<<endl;
	    
// 	}
// 	return 0;
// }  


// 4> Method

// sort A and B

// while(i<m and j<n)
// {
//     if(A[i]<B[j]) i++;
//     else if(A[i]==B[j])
//     {
//         i++;
//         j++;
//     }
//     else if(A[i]>B[j]) return -1;
// }
// if(i==m) return -1;
// else if(j==n) return 1;

