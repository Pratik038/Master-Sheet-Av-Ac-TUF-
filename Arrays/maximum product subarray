// { Driver Code Starts
#include <bits/stdc++.h>

using namespace std;

 // } Driver Code Ends




// Approaches:

// 1. O(n^2) Approach - check for all subarray

// 2 . modified kadanes algo  O(n)
//   steps:
//   if(arr[i]>0) - target mn as min(mn*arr[i],1)     mx=max*arr[i]
//   else if(arr[i]==0) mx=mn=1
//   else if(arr[i]<0) - target mx as max(mx*arr[i],1)   mn=mn*arr[i]
//   and maintain the maximum mx till then
  


//User function template for C++
class Solution{
public:
    long long min(long long a,long long b)
    {
        if(a<=b) return a;
        return b;
    }
    long long max(long long a, long long b)
    {
        if(a>b) return a;
        return b;
    }
	// Function to find maximum product subarray
	long long maxProduct(int *arr, int n) {
	    // code here
	    long long res=1,mx=1,mn=1;
	    for(int i=0;i<n;i++)
	    {
	        if(arr[i]>0){
	            mn=min(mn*arr[i],1);
	            mx=mx*arr[i];
	        }
	        else if(arr[i]==0){
	            mx=1;
	            mn=1;
	        }
	        else{
	            swap(mx,mn);
	            mn=mn*arr[i];
	            mx=max(mx*arr[i],1);
	        }
	        res=max(res,mx);
	    }
	    return res;
	}
};


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, i;
        cin >> n;
        int arr[n];
        for (i = 0; i < n; i++) {
            cin >> arr[i];
        }
        Solution ob;
        auto ans = ob.maxProduct(arr, n);
        cout << ans << "\n";
    }
    return 0;
}  // } Driver Code Ends
