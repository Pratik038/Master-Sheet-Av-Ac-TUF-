// Element that appear once in sorted array and rest element appears twice
// Approaches:
// 1>. Traverse and check O(n)
// 2>. Hashing O(n) and O(n) extra space
// 3>. Xor of all elements
// // 4>. Binary Search
// -----> Boundary case 
// -----> pair property starts at even position and ends at odd position
// -----> Unique Property 

#include<bits/stdc++.h>
using namespace std;

int search(int arr[],int n)
{
    int l=0,h=n-1;
    // Boundary Case
    if(h==0) return arr[0];
    if(arr[0]!=arr[1]) return arr[0];
    if(arr[h]!=arr[h-1]) return arr[h];
    while(l<=h)
    {
        int mid=l+(h-l)/2;
        // unique property
        if(arr[mid]!=arr[mid-1]  && arr[mid]!=arr[mid+1]) return arr[mid];
        // Pair Property
        if((mid%2==0 && arr[mid]==arr[mid+1] )  ||( mid%2==1 && arr[mid]==arr[mid-1]))
            l=mid+1;
        else
        {
            h=mid-1;
        }
                 
    }
    return -1;
}
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++) cin>>arr[i];
    cout<<search(arr,n);
    return 0;

}
