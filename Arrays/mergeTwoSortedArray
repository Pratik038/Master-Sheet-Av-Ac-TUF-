// merge two sorted array
// Variations: 

// 1>. with extra space ->merge&sort&divide, Hashing or two pointer  O(n+m) space- O(n+m)
// 2> without extra space -> Insertion sort technique O(n*m)  , Optimal - gap method O((n+m)log(n+m) 


 #include<bits/stdc++.h>
 using namespace std;

// Insertion Sort Technique
void mergeArr(int a[],int m,int b[],int n)
{
    for(int i=n-1;i>=0;i--)
    {
        int j=m-2;
        int temp=a[m-1];
        while(j>=0 && a[j]>b[i])
        {
            a[j+1]=a[j];
            j--;
        }
        if(j!=m-2 || temp>b[i])
        {
            a[j+1]=b[i];
            b[i]=temp;
        }
    }
}



// Method optimal Gap Method

// int newGap(int gap)
// {
//     if(gap<=1) return 0;
//     return (gap/2+gap%2);
// }

//  void mergeArr(int a[],int m,int b[],int n)
//  {
//      int i,j,gap=m+n;
//      for(gap=newGap(gap);gap>0;gap=newGap(gap))
//      {
//          // 1st array comparision
//         for(i=0;i+gap<m;i++)
//         {
//             if(a[i]>a[i+gap]) swap(a[i],a[i+gap]);
//         }
//         // 2nd array comparision
//         for(j=gap>m?gap-m:0;i<m && j<n;i++,j++)
//         {
//             if(a[i]>b[j]) swap(a[i],b[j]);
//         }
//         // both array comparision
//         if(j<n)
//         {
//             for(j=0;j+gap<n;j++)
//             {
//                 if(b[j]>b[j+gap]) swap(b[j],b[j+gap]);
//             }
//         }
//      }
//  }
 int main()
 {
    int n,m;
    cin>>m>>n;
    int a[m],b[n];
    for(int i=0;i<m;i++) cin>>a[i];
    for(int i=0;i<n;i++) cin>>b[i];
    mergeArr(a,m,b,n);
    for(int i=0;i<m;i++) cout<<a[i]<<" ";
    for(int i=0;i<n;i++) cout<<b[i]<<" ";
    return 0;

 } 
