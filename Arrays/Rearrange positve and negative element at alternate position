// Rearrange Positive and negative elements at alternate position

// Approaches:
// 1>. Using Extra Space O(n) 
// 2>. Optimal Solution O(n) order not preserved
// 3>. Optimal solution O(n^2) order preserved


// Approach 2:

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    
    // STEP 1>. Make all positive elements to the left and all negative to right
    int i=0,j=n-1;
    while(i<=j)
    {
        if(arr[i]<0 && arr[j]>0) // if left element is negative and right element is positive
        {
            swap(arr[i],arr[j]);
            i++;j--;
        }
        else if(arr[i]>0 && arr[i]<0)
        {
            i++;
            j--;
        }
        else if(arr[i]>0) i++;
        else if(arr[j]<0) j--;
    }
    // After this i will point to first negative element
    // After this j will point to first positive element
    if(i==0 || i==n) // no positive element || no negative element 
    {
     for(int k=0;k<n;k++) cout<<arr[k]<<" ";        
    }
    else
    {
        // Start swapping to get alternate negative and positive element 
        int k=0; // points to position which should contain negative element
        while(k<n && i<n)
        {
            swap(arr[i],arr[k]);
            k+=2;
            i++;
        }

        for(int m=0;m<n;m++)
            cout<<arr[m]<<" ";

    }
    
    return 0;
}


// Method 3:
//Order Preserved

void rightrotate(int arr[], int n, int outofplace, int cur)
{
    char tmp = arr[cur];
    for (int i = cur; i > outofplace; i--)
        arr[i] = arr[i - 1];
    arr[outofplace] = tmp;
}
 
void rearrange(int arr[], int n)
{
    int outofplace = -1;
 
    for (int index = 0; index < n; index++)
    {
        if (outofplace >= 0)
        {
            
            if (((arr[index] >= 0) && (arr[outofplace] < 0))
                || ((arr[index] < 0)
                    && (arr[outofplace] >= 0)))
            {
                rightrotate(arr, n, outofplace, index);
 
                // the new out-of-place entry is now 2 steps
                // ahead
                if (index - outofplace >= 2)
                    outofplace = outofplace + 2;
                else
                    outofplace = -1;
            }
        }
//  wrong index if at even position there is positive element or at odd index there is negative element
        
        if (outofplace == -1) {
            // check if current entry is out-of-place
            if (((arr[index] >= 0) && (index%2==0))
                || ((arr[index] < 0) && (index%2==1))) {
                outofplace = index;
            }
        }
    }
}


