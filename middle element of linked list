// find the middle of the linked list

// Approaches:
//1. Brute Force- count length of list (n) traverse (n/2 +1) and return node      
  // time complexity: O(n)+O(n/2) given node pos=n
// 2. Fast and slow pointer O(n/2)


#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

void insertAtTail(node *&head, int data)
{
    node *n = new node(data);
    if (head == NULL)
    {
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = n;
}

void display(node *head)
{
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}

int middle(node*head)
{
    node*slow=head;
    node*fast=head;
    while(fast!=NULL &&fast->next!=NULL )
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow->data;
}

int main()
{
    node *head = NULL;
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    insertAtTail(head, 3);
    insertAtTail(head, 4);
    insertAtTail(head, 5);
    insertAtTail(head, 6);
    // //display(head);
  cout<<middle(head);    
    return 0;
}
