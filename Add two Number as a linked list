// Add two number as a linked list

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

void insertAtTail(node *&head, int data)
{
    node *n = new node(data);
    if (head == NULL)
    {
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = n;
}

void display(node *head)
{
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}
node* insertAtHead(node*res,int data)
{
    node*n=new node(data);
    if(res==NULL)
    {
        res=n;
        return res;
    }
    n->next=res;
    res=n;
    return res;

}

node* reverseList(node*head)
{
    node*prev=NULL;
    node*curr=head;
    node*forward;
    while(curr!=NULL)
    {
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;
    }
    return prev;
}
node* addTwoLL(node*head1,node*head2)
{
    head1=reverseList(head1);
    head2=reverseList(head2);
    node*res=NULL;
    int sum=0;
    int carry=0;
    while(head1 || head2)
    {
        sum=carry;
        if(head1!=NULL)
        {
            sum+=head1->data;
            head1=head1->next;
        }
        if(head2!=NULL)
        {
            sum+=head2->data;
            head2=head2->next;
        }
        sum=sum%10;
        carry=sum/10;
        res=insertAtHead(res,sum);
    }
    if(carry!=0)
        res=insertAtHead(res,sum);
    return res;    
}

int main()
{
    node *head1 = NULL;
    node*head2=NULL;
    insertAtTail(head1, 1);
    insertAtTail(head1, 1);
    insertAtTail(head1, 1);
    insertAtTail(head1, 2);
    insertAtTail(head2, 3);
    insertAtTail(head2, 2);
    insertAtTail(head2, 1);
    insertAtTail(head2, 2);
    node*res=addTwoLL(head1,head2);
    display(res);
    return 0;
}
