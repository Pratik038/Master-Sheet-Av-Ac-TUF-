
/*  the node structure is as follows

struct Node {
    int data;
    Node *next;
    Node *arb;

    Node(int x) {
        data = x;
        next = NULL;
        arb = NULL;
    }
};
*/

// Should return the head of the copied linked list the
// output will be 1 if successfully copied
// O(n)+O(n) + O(n) for segregation  and O(1) extra space

Node *copyList(Node *head) {
    // Your code here
    if(head==NULL) return NULL;
        Node*l1=head;
        Node *l2,*newHead;
        
        //merging the created cloned list to consecutive blocks of l1
        while(l1!=NULL)
        {
            l2=new Node(l1->data);
            l2->next=l1->next;
            l1->next=l2;
            l1=l1->next->next;
        }
        //Setting up random pointer connection in clone linked list
        l1=head;
        while(l1!=NULL)
        {
            if(l1->arb!=NULL)
            l1->next->arb =  l1->arb->next;
            l1=l1->next->next;
            
        }
        newHead=head->next;
        
        //Seperating the original and cloned linked list from the messed up list
        
        l1=head;
        while(l1!=NULL)
        {
            l2=l1->next;
            l1->next=l2->next;
            if(l2->next!=NULL)
            l2->next=l1->next->next;    
            l1=l1->next;
        }
        
        return newHead;
    
}

// using hashmap in O(n)+O(n) time complexity and O(n) space complexity
// public Node copyRandomList(Node head) {
//         if(head == null)
//             return null;
        
//         Map<Node, Node> map = new HashMap<>();
//         }
        
//         node = head;
//         while(node != null) {
//             map.get(node).next = map.get(node.next);
//             map.get(node).random = map.get(node.random);
//             node = node.next;
//         }
        
//         return map.get(head);
//     }
