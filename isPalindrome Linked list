// check if a linkedlist is palindrome

// Approaches:
//1. Brute Force- Put all element in array and check if array is palindomic
// time complexity: O(n)put in array + O(n)-check array is palindrome and space is O(n)
// 2. Fast and slow pointer O(n/2)(middle of linked list) + O(n/2)(reverse) + o(n/2)(compare left and right half) + to retain linkedlist O(n/2)+O(n/2)
// space-O(1)

#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

void insertAtTail(node *&head, int data)
{
    node *n = new node(data);
    if (head == NULL)
    {
        head = n;
        return;
    }
    node *temp = head;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = n;
}

void display(node *head)
{
    node *temp = head;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}
node *reverseList(node *ptr)
{
    // if(ptr->next==NULL)
    //     return ptr;
    node *prev = NULL, *curr = ptr, *forward;
    while (curr != NULL)
    {
        forward = curr->next;
        curr->next = prev;
        prev = curr;
        curr = forward;
    }
    // prev=ptr;
    return prev;
}
bool ispalindrome(node *head)
{
    if (head == NULL || head->next == NULL)
        return true;
    node *fast = head;
    node *slow = head;
    while (fast->next && fast->next->next)
    {
        slow = slow->next;
        fast = fast->next->next;
    }
    slow->next = reverseList(slow->next);
    slow = slow->next;
    while (slow != NULL)
    {
        if (head->data != slow->data)
            return false;
        head = head->next;
        slow = slow->next;
    }
    return true;
}

int main()
{
    node *head = NULL;
    insertAtTail(head, 2);
    insertAtTail(head, 1);
    insertAtTail(head, 1);
    insertAtTail(head, 2);
    cout << ispalindrome(head);
    return 0;
}
