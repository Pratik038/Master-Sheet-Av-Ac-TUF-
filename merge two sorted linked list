// find the middle of the linked list

// Approaches:
//1. Brute Force- count length of list (n) traverse (n/2 +1) and return node      
  // time complexity: O(n)+O(n/2) given node pos=n
// 2. Fast and slow pointer O(n/2)


#include <bits/stdc++.h>
using namespace std;

class node
{
public:
    int data;
    node *next;
    node(int data)
    {
        this->data = data;
        next = NULL;
    }
};

void insertAtTail(node *&head1, int data)
{
    node *n = new node(data);
    if (head1 == NULL)
    {
        head1 = n;
        return;
    }
    node *temp = head1;
    while (temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next = n;
}

void display(node *head1)
{
    node *temp = head1;
    while (temp != NULL)
    {
        cout << temp->data << "->";
        temp = temp->next;
    }
    cout << "NULL";
}

void mergeList(node*head1,node*head2,node *&head)
{
    if(head1==NULL) {
        head=head2;
        return;
    }
    if(head2==NULL)
    {
        head=head1;
        return;
    }
    if(head1->data > head2->data)
    {
        swap(head1,head2);
    }
    head=head1;
    while(head1 && head2)
    {
        node*tmp=NULL;
        while(head1 && head1->data<=head2->data)
        {
            tmp=head1;
            head1=head1->next;
        }
        tmp->next=head2;
        swap(head1,head2);
    }

}


int main()
{
    node *head1 = NULL;
    insertAtTail(head1, 1);
    insertAtTail(head1, 3);
    insertAtTail(head1, 5);
    insertAtTail(head1, 7);
    insertAtTail(head1, 9);
    insertAtTail(head1, 11);
    display(head1);
    cout<<"\n";
     node *head2 = NULL;
    insertAtTail(head2, 2);
    insertAtTail(head2, 4);
    insertAtTail(head2, 6);
    insertAtTail(head2, 8);
    insertAtTail(head2, 10);
    insertAtTail(head2, 12);
    display(head2);
    cout<<"\n";
    node*head3;
    mergeList(head1,head2,head3);
    display(head3);
    return 0;
}
